# Generated by Django 4.2.19 on 2025-06-03 02:14

from django.db import migrations

def update_post_codes_forward(apps, schema_editor):
    Employee = apps.get_model('employees', 'Employee')
    # Mapping of old codes to new codes
    post_code_map = {
        'prof': 'professor',
        'assoc_prof': 'associate_professor',
        'assist_registrar': 'assistant_registrar',
        'admin_officer': 'administrative_officer',
        'education_officer': 'education_officer',
        'program_coord': 'program_coordinator',
        'research_assist': 'research_assistant',
        'senior_lecturer': 'senior_lecturer',
        # Add any other old codes that need mapping here
    }

    for old_code, new_code in post_code_map.items():
        Employee.objects.filter(post=old_code).update(post=new_code)

def update_post_codes_backward(apps, schema_editor):
    Employee = apps.get_model('employees', 'Employee')
    # Mapping of new codes back to old codes for reversing
    # Note: Reversing might lose precision if multiple old codes mapped to one new code
    # This example assumes a one-to-one or many-to-one mapping where reversing to the most common old code is acceptable.
    # Adjust this mapping if your situation is more complex.
    post_code_map = {
        'professor': 'prof',
        'associate_professor': 'assoc_prof',
        'assistant_registrar': 'assist_registrar',
        'administrative_officer': 'admin_officer',
        'education_officer': 'education_officer',
        'program_coordinator': 'program_coord',
        'research_assistant': 'research_assist',
        'senior_lecturer': 'senior_lecturer',
        # Add reverse mappings here
    }
    
    for new_code, old_code in post_code_map.items():
         Employee.objects.filter(post=new_code).update(post=old_code)


class Migration(migrations.Migration):

    dependencies = [
        ('employees', '0010_alter_employee_post'),
    ]

    operations = [
        migrations.RunPython(update_post_codes_forward, update_post_codes_backward),
    ]
